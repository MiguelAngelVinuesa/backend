// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetBoRound(params *GetBoRoundParams, opts ...ClientOption) (*GetBoRoundOK, error)

	GetBoRounds(params *GetBoRoundsParams, opts ...ClientOption) (*GetBoRoundsOK, error)

	GetBoSessions(params *GetBoSessionsParams, opts ...ClientOption) (*GetBoSessionsOK, error)

	GetGgPlayerRounds(params *GetGgPlayerRoundsParams, opts ...ClientOption) (*GetGgPlayerRoundsOK, error)

	GetGgSessionRounds(params *GetGgSessionRoundsParams, opts ...ClientOption) (*GetGgSessionRoundsOK, error)

	GetPing(params *GetPingParams, opts ...ClientOption) (*GetPingOK, error)

	GetPlayerGameState(params *GetPlayerGameStateParams, opts ...ClientOption) (*GetPlayerGameStateOK, error)

	GetPlayerGlobalState(params *GetPlayerGlobalStateParams, opts ...ClientOption) (*GetPlayerGlobalStateOK, error)

	GetRoundState(params *GetRoundStateParams, opts ...ClientOption) (*GetRoundStateOK, error)

	GetSessionState(params *GetSessionStateParams, opts ...ClientOption) (*GetSessionStateOK, error)

	OptionsAuth(params *OptionsAuthParams, opts ...ClientOption) (*OptionsAuthOK, error)

	OptionsBoResetGameState(params *OptionsBoResetGameStateParams, opts ...ClientOption) (*OptionsBoResetGameStateOK, error)

	OptionsBoRound(params *OptionsBoRoundParams, opts ...ClientOption) (*OptionsBoRoundOK, error)

	OptionsBoRounds(params *OptionsBoRoundsParams, opts ...ClientOption) (*OptionsBoRoundsOK, error)

	OptionsBoSessions(params *OptionsBoSessionsParams, opts ...ClientOption) (*OptionsBoSessionsOK, error)

	OptionsGgPlayerRounds(params *OptionsGgPlayerRoundsParams, opts ...ClientOption) (*OptionsGgPlayerRoundsOK, error)

	OptionsGgSessionRounds(params *OptionsGgSessionRoundsParams, opts ...ClientOption) (*OptionsGgSessionRoundsOK, error)

	PostAuth(params *PostAuthParams, opts ...ClientOption) (*PostAuthOK, error)

	PostBoResetGameState(params *PostBoResetGameStateParams, opts ...ClientOption) (*PostBoResetGameStateOK, error)

	PostComplexRoundBet(params *PostComplexRoundBetParams, opts ...ClientOption) (*PostComplexRoundBetOK, error)

	PostComplexRoundComplete(params *PostComplexRoundCompleteParams, opts ...ClientOption) (*PostComplexRoundCompleteOK, error)

	PostComplexRoundInit(params *PostComplexRoundInitParams, opts ...ClientOption) (*PostComplexRoundInitOK, error)

	PostComplexRoundWin(params *PostComplexRoundWinParams, opts ...ClientOption) (*PostComplexRoundWinOK, error)

	PostRound(params *PostRoundParams, opts ...ClientOption) (*PostRoundOK, error)

	PostRoundNext(params *PostRoundNextParams, opts ...ClientOption) (*PostRoundNextOK, error)

	PutPlayerGameState(params *PutPlayerGameStateParams, opts ...ClientOption) (*PutPlayerGameStateOK, error)

	PutPlayerGlobalState(params *PutPlayerGlobalStateParams, opts ...ClientOption) (*PutPlayerGlobalStateOK, error)

	PutSessionState(params *PutSessionStateParams, opts ...ClientOption) (*PutSessionStateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetBoRound rounds data
*/
func (a *Client) GetBoRound(params *GetBoRoundParams, opts ...ClientOption) (*GetBoRoundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBoRoundParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBoRound",
		Method:             "GET",
		PathPattern:        "/bo/round",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBoRoundReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBoRoundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBoRound: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBoRounds sessions rounds
*/
func (a *Client) GetBoRounds(params *GetBoRoundsParams, opts ...ClientOption) (*GetBoRoundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBoRoundsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBoRounds",
		Method:             "GET",
		PathPattern:        "/bo/rounds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBoRoundsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBoRoundsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBoRounds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBoSessions players sessions
*/
func (a *Client) GetBoSessions(params *GetBoSessionsParams, opts ...ClientOption) (*GetBoSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBoSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBoSessions",
		Method:             "GET",
		PathPattern:        "/bo/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBoSessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBoSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBoSessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGgPlayerRounds players rounds
*/
func (a *Client) GetGgPlayerRounds(params *GetGgPlayerRoundsParams, opts ...ClientOption) (*GetGgPlayerRoundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGgPlayerRoundsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGgPlayerRounds",
		Method:             "GET",
		PathPattern:        "/gg/player-rounds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGgPlayerRoundsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGgPlayerRoundsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGgPlayerRounds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGgSessionRounds sessions rounds
*/
func (a *Client) GetGgSessionRounds(params *GetGgSessionRoundsParams, opts ...ClientOption) (*GetGgSessionRoundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGgSessionRoundsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGgSessionRounds",
		Method:             "GET",
		PathPattern:        "/gg/session-rounds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGgSessionRoundsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGgSessionRoundsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGgSessionRounds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPing healths check

  Endpoint to serve as a health check
*/
func (a *Client) GetPing(params *GetPingParams, opts ...ClientOption) (*GetPingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPing",
		Method:             "GET",
		PathPattern:        "/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPing: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlayerGameState players game state
*/
func (a *Client) GetPlayerGameState(params *GetPlayerGameStateParams, opts ...ClientOption) (*GetPlayerGameStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerGameStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPlayerGameState",
		Method:             "GET",
		PathPattern:        "/player-game-state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlayerGameStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlayerGameStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPlayerGameState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPlayerGlobalState players global state
*/
func (a *Client) GetPlayerGlobalState(params *GetPlayerGlobalStateParams, opts ...ClientOption) (*GetPlayerGlobalStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlayerGlobalStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPlayerGlobalState",
		Method:             "GET",
		PathPattern:        "/player-global-state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlayerGlobalStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlayerGlobalStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPlayerGlobalState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRoundState rounds state
*/
func (a *Client) GetRoundState(params *GetRoundStateParams, opts ...ClientOption) (*GetRoundStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoundStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRoundState",
		Method:             "GET",
		PathPattern:        "/round-state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRoundStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoundStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRoundState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSessionState gets game session state
*/
func (a *Client) GetSessionState(params *GetSessionStateParams, opts ...ClientOption) (*GetSessionStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSessionState",
		Method:             "GET",
		PathPattern:        "/session-state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSessionStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSessionStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSessionState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionsAuth cs o r s handlers
*/
func (a *Client) OptionsAuth(params *OptionsAuthParams, opts ...ClientOption) (*OptionsAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OptionsAuth",
		Method:             "OPTIONS",
		PathPattern:        "/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OptionsAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionsBoResetGameState cs o r s handlers
*/
func (a *Client) OptionsBoResetGameState(params *OptionsBoResetGameStateParams, opts ...ClientOption) (*OptionsBoResetGameStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsBoResetGameStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OptionsBoResetGameState",
		Method:             "OPTIONS",
		PathPattern:        "/bo/reset-game-state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OptionsBoResetGameStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsBoResetGameStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsBoResetGameState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionsBoRound cs o r s handlers
*/
func (a *Client) OptionsBoRound(params *OptionsBoRoundParams, opts ...ClientOption) (*OptionsBoRoundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsBoRoundParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OptionsBoRound",
		Method:             "OPTIONS",
		PathPattern:        "/bo/round",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OptionsBoRoundReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsBoRoundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsBoRound: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionsBoRounds cs o r s handlers
*/
func (a *Client) OptionsBoRounds(params *OptionsBoRoundsParams, opts ...ClientOption) (*OptionsBoRoundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsBoRoundsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OptionsBoRounds",
		Method:             "OPTIONS",
		PathPattern:        "/bo/rounds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OptionsBoRoundsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsBoRoundsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsBoRounds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionsBoSessions cs o r s handlers
*/
func (a *Client) OptionsBoSessions(params *OptionsBoSessionsParams, opts ...ClientOption) (*OptionsBoSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsBoSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OptionsBoSessions",
		Method:             "OPTIONS",
		PathPattern:        "/bo/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OptionsBoSessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsBoSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsBoSessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionsGgPlayerRounds cs o r s handlers
*/
func (a *Client) OptionsGgPlayerRounds(params *OptionsGgPlayerRoundsParams, opts ...ClientOption) (*OptionsGgPlayerRoundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsGgPlayerRoundsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OptionsGgPlayerRounds",
		Method:             "OPTIONS",
		PathPattern:        "/gg/player-rounds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OptionsGgPlayerRoundsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsGgPlayerRoundsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsGgPlayerRounds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OptionsGgSessionRounds cs o r s handlers
*/
func (a *Client) OptionsGgSessionRounds(params *OptionsGgSessionRoundsParams, opts ...ClientOption) (*OptionsGgSessionRoundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOptionsGgSessionRoundsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OptionsGgSessionRounds",
		Method:             "OPTIONS",
		PathPattern:        "/gg/session-rounds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OptionsGgSessionRoundsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OptionsGgSessionRoundsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for OptionsGgSessionRounds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAuth authenticates player
*/
func (a *Client) PostAuth(params *PostAuthParams, opts ...ClientOption) (*PostAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAuth",
		Method:             "POST",
		PathPattern:        "/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostBoResetGameState resets player game state
*/
func (a *Client) PostBoResetGameState(params *PostBoResetGameStateParams, opts ...ClientOption) (*PostBoResetGameStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBoResetGameStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostBoResetGameState",
		Method:             "POST",
		PathPattern:        "/bo/reset-game-state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBoResetGameStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBoResetGameStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostBoResetGameState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostComplexRoundBet complexes round bet request
*/
func (a *Client) PostComplexRoundBet(params *PostComplexRoundBetParams, opts ...ClientOption) (*PostComplexRoundBetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComplexRoundBetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostComplexRoundBet",
		Method:             "POST",
		PathPattern:        "/complex-round-bet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostComplexRoundBetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComplexRoundBetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostComplexRoundBet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostComplexRoundComplete complexes round completion request
*/
func (a *Client) PostComplexRoundComplete(params *PostComplexRoundCompleteParams, opts ...ClientOption) (*PostComplexRoundCompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComplexRoundCompleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostComplexRoundComplete",
		Method:             "POST",
		PathPattern:        "/complex-round-complete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostComplexRoundCompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComplexRoundCompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostComplexRoundComplete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostComplexRoundInit inits complex round passing only optional state and result data
*/
func (a *Client) PostComplexRoundInit(params *PostComplexRoundInitParams, opts ...ClientOption) (*PostComplexRoundInitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComplexRoundInitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostComplexRoundInit",
		Method:             "POST",
		PathPattern:        "/complex-round-init",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostComplexRoundInitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComplexRoundInitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostComplexRoundInit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostComplexRoundWin complexes round win request
*/
func (a *Client) PostComplexRoundWin(params *PostComplexRoundWinParams, opts ...ClientOption) (*PostComplexRoundWinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComplexRoundWinParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostComplexRoundWin",
		Method:             "POST",
		PathPattern:        "/complex-round-win",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostComplexRoundWinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComplexRoundWinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostComplexRoundWin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRound processes round in a single request
*/
func (a *Client) PostRound(params *PostRoundParams, opts ...ClientOption) (*PostRoundOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRoundParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRound",
		Method:             "POST",
		PathPattern:        "/round",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRoundReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRoundOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRound: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRoundNext gets specified round spin and update round state
*/
func (a *Client) PostRoundNext(params *PostRoundNextParams, opts ...ClientOption) (*PostRoundNextOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRoundNextParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostRoundNext",
		Method:             "POST",
		PathPattern:        "/round/next",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRoundNextReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRoundNextOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostRoundNext: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutPlayerGameState sets new player game state
*/
func (a *Client) PutPlayerGameState(params *PutPlayerGameStateParams, opts ...ClientOption) (*PutPlayerGameStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPlayerGameStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutPlayerGameState",
		Method:             "PUT",
		PathPattern:        "/player-game-state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPlayerGameStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPlayerGameStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutPlayerGameState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutPlayerGlobalState sets new player global state
*/
func (a *Client) PutPlayerGlobalState(params *PutPlayerGlobalStateParams, opts ...ClientOption) (*PutPlayerGlobalStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPlayerGlobalStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutPlayerGlobalState",
		Method:             "PUT",
		PathPattern:        "/player-global-state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPlayerGlobalStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutPlayerGlobalStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutPlayerGlobalState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutSessionState sets new game session state
*/
func (a *Client) PutSessionState(params *PutSessionStateParams, opts ...ClientOption) (*PutSessionStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSessionStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutSessionState",
		Method:             "PUT",
		PathPattern:        "/session-state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSessionStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSessionStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutSessionState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
