// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"git-codecommit.eu-central-1.amazonaws.com/v1/repos/game-manager.git/dstore/models"
)

// GetRoundStateReader is a Reader for the GetRoundState structure.
type GetRoundStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoundStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoundStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRoundStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRoundStateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRoundStateOK creates a GetRoundStateOK with default headers values
func NewGetRoundStateOK() *GetRoundStateOK {
	return &GetRoundStateOK{}
}

/* GetRoundStateOK describes a response with status code 200, with default header values.

200
*/
type GetRoundStateOK struct {
	Payload *models.RoundStateResponse
}

func (o *GetRoundStateOK) Error() string {
	return fmt.Sprintf("[GET /round-state][%d] getRoundStateOK  %+v", 200, o.Payload)
}
func (o *GetRoundStateOK) GetPayload() *models.RoundStateResponse {
	return o.Payload
}

func (o *GetRoundStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoundStateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoundStateBadRequest creates a GetRoundStateBadRequest with default headers values
func NewGetRoundStateBadRequest() *GetRoundStateBadRequest {
	return &GetRoundStateBadRequest{}
}

/* GetRoundStateBadRequest describes a response with status code 400, with default header values.

400
*/
type GetRoundStateBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetRoundStateBadRequest) Error() string {
	return fmt.Sprintf("[GET /round-state][%d] getRoundStateBadRequest  %+v", 400, o.Payload)
}
func (o *GetRoundStateBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoundStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoundStateInternalServerError creates a GetRoundStateInternalServerError with default headers values
func NewGetRoundStateInternalServerError() *GetRoundStateInternalServerError {
	return &GetRoundStateInternalServerError{}
}

/* GetRoundStateInternalServerError describes a response with status code 500, with default header values.

500
*/
type GetRoundStateInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetRoundStateInternalServerError) Error() string {
	return fmt.Sprintf("[GET /round-state][%d] getRoundStateInternalServerError  %+v", 500, o.Payload)
}
func (o *GetRoundStateInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRoundStateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
