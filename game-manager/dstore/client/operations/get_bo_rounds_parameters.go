// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetBoRoundsParams creates a new GetBoRoundsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBoRoundsParams() *GetBoRoundsParams {
	return &GetBoRoundsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBoRoundsParamsWithTimeout creates a new GetBoRoundsParams object
// with the ability to set a timeout on a request.
func NewGetBoRoundsParamsWithTimeout(timeout time.Duration) *GetBoRoundsParams {
	return &GetBoRoundsParams{
		timeout: timeout,
	}
}

// NewGetBoRoundsParamsWithContext creates a new GetBoRoundsParams object
// with the ability to set a context for a request.
func NewGetBoRoundsParamsWithContext(ctx context.Context) *GetBoRoundsParams {
	return &GetBoRoundsParams{
		Context: ctx,
	}
}

// NewGetBoRoundsParamsWithHTTPClient creates a new GetBoRoundsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBoRoundsParamsWithHTTPClient(client *http.Client) *GetBoRoundsParams {
	return &GetBoRoundsParams{
		HTTPClient: client,
	}
}

/* GetBoRoundsParams contains all the parameters to send to the API endpoint
   for the get bo rounds operation.

   Typically these are written to a http.Request.
*/
type GetBoRoundsParams struct {

	// XAPIKey.
	XAPIKey string

	/* Cancelled.

	   If provided only rounds that were either cancelled or not are returned
	*/
	Cancelled *bool

	/* Completed.

	   If provided only rounds that were either completed or not are returned
	*/
	Completed *bool

	/* CreatedFrom.

	   Return rounds that were created on or after this timestamp (format '2023-04-01 12:00:00' in UTC)
	*/
	CreatedFrom *string

	/* CreatedTo.

	   Return rounds that were created on or before this timestamp (format '2023-04-02 23:59:59' in UTC)
	*/
	CreatedTo *string

	// Cursor.
	Cursor *string

	/* Debug.

	   If provided only rounds that are either debug rounds or not are returned
	*/
	Debug *bool

	/* Limit.

	   Overwrite default DS pagination limit if provided (must be >0)

	   Format: int32
	*/
	Limit *int32

	/* MaxWinMultiplier.

	   Maximum win multiplier - (difference between bet and win)
	*/
	MaxWinMultiplier *float64

	/* MinWinMultiplier.

	   Minimum win multiplier - (difference between bet and win)
	*/
	MinWinMultiplier *float64

	// Session.
	Session string

	/* UpdatedFrom.

	   Return rounds that were updated on or after this timestamp (format '2023-04-01 12:00:00' in UTC)
	*/
	UpdatedFrom *string

	/* UpdatedTo.

	   Return rounds that were updated on or before this timestamp (format '2023-04-02 23:59:59' in UTC)
	*/
	UpdatedTo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get bo rounds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBoRoundsParams) WithDefaults() *GetBoRoundsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get bo rounds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBoRoundsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get bo rounds params
func (o *GetBoRoundsParams) WithTimeout(timeout time.Duration) *GetBoRoundsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get bo rounds params
func (o *GetBoRoundsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get bo rounds params
func (o *GetBoRoundsParams) WithContext(ctx context.Context) *GetBoRoundsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get bo rounds params
func (o *GetBoRoundsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get bo rounds params
func (o *GetBoRoundsParams) WithHTTPClient(client *http.Client) *GetBoRoundsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get bo rounds params
func (o *GetBoRoundsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAPIKey adds the xAPIKey to the get bo rounds params
func (o *GetBoRoundsParams) WithXAPIKey(xAPIKey string) *GetBoRoundsParams {
	o.SetXAPIKey(xAPIKey)
	return o
}

// SetXAPIKey adds the xApiKey to the get bo rounds params
func (o *GetBoRoundsParams) SetXAPIKey(xAPIKey string) {
	o.XAPIKey = xAPIKey
}

// WithCancelled adds the cancelled to the get bo rounds params
func (o *GetBoRoundsParams) WithCancelled(cancelled *bool) *GetBoRoundsParams {
	o.SetCancelled(cancelled)
	return o
}

// SetCancelled adds the cancelled to the get bo rounds params
func (o *GetBoRoundsParams) SetCancelled(cancelled *bool) {
	o.Cancelled = cancelled
}

// WithCompleted adds the completed to the get bo rounds params
func (o *GetBoRoundsParams) WithCompleted(completed *bool) *GetBoRoundsParams {
	o.SetCompleted(completed)
	return o
}

// SetCompleted adds the completed to the get bo rounds params
func (o *GetBoRoundsParams) SetCompleted(completed *bool) {
	o.Completed = completed
}

// WithCreatedFrom adds the createdFrom to the get bo rounds params
func (o *GetBoRoundsParams) WithCreatedFrom(createdFrom *string) *GetBoRoundsParams {
	o.SetCreatedFrom(createdFrom)
	return o
}

// SetCreatedFrom adds the createdFrom to the get bo rounds params
func (o *GetBoRoundsParams) SetCreatedFrom(createdFrom *string) {
	o.CreatedFrom = createdFrom
}

// WithCreatedTo adds the createdTo to the get bo rounds params
func (o *GetBoRoundsParams) WithCreatedTo(createdTo *string) *GetBoRoundsParams {
	o.SetCreatedTo(createdTo)
	return o
}

// SetCreatedTo adds the createdTo to the get bo rounds params
func (o *GetBoRoundsParams) SetCreatedTo(createdTo *string) {
	o.CreatedTo = createdTo
}

// WithCursor adds the cursor to the get bo rounds params
func (o *GetBoRoundsParams) WithCursor(cursor *string) *GetBoRoundsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the get bo rounds params
func (o *GetBoRoundsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithDebug adds the debug to the get bo rounds params
func (o *GetBoRoundsParams) WithDebug(debug *bool) *GetBoRoundsParams {
	o.SetDebug(debug)
	return o
}

// SetDebug adds the debug to the get bo rounds params
func (o *GetBoRoundsParams) SetDebug(debug *bool) {
	o.Debug = debug
}

// WithLimit adds the limit to the get bo rounds params
func (o *GetBoRoundsParams) WithLimit(limit *int32) *GetBoRoundsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get bo rounds params
func (o *GetBoRoundsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithMaxWinMultiplier adds the maxWinMultiplier to the get bo rounds params
func (o *GetBoRoundsParams) WithMaxWinMultiplier(maxWinMultiplier *float64) *GetBoRoundsParams {
	o.SetMaxWinMultiplier(maxWinMultiplier)
	return o
}

// SetMaxWinMultiplier adds the maxWinMultiplier to the get bo rounds params
func (o *GetBoRoundsParams) SetMaxWinMultiplier(maxWinMultiplier *float64) {
	o.MaxWinMultiplier = maxWinMultiplier
}

// WithMinWinMultiplier adds the minWinMultiplier to the get bo rounds params
func (o *GetBoRoundsParams) WithMinWinMultiplier(minWinMultiplier *float64) *GetBoRoundsParams {
	o.SetMinWinMultiplier(minWinMultiplier)
	return o
}

// SetMinWinMultiplier adds the minWinMultiplier to the get bo rounds params
func (o *GetBoRoundsParams) SetMinWinMultiplier(minWinMultiplier *float64) {
	o.MinWinMultiplier = minWinMultiplier
}

// WithSession adds the session to the get bo rounds params
func (o *GetBoRoundsParams) WithSession(session string) *GetBoRoundsParams {
	o.SetSession(session)
	return o
}

// SetSession adds the session to the get bo rounds params
func (o *GetBoRoundsParams) SetSession(session string) {
	o.Session = session
}

// WithUpdatedFrom adds the updatedFrom to the get bo rounds params
func (o *GetBoRoundsParams) WithUpdatedFrom(updatedFrom *string) *GetBoRoundsParams {
	o.SetUpdatedFrom(updatedFrom)
	return o
}

// SetUpdatedFrom adds the updatedFrom to the get bo rounds params
func (o *GetBoRoundsParams) SetUpdatedFrom(updatedFrom *string) {
	o.UpdatedFrom = updatedFrom
}

// WithUpdatedTo adds the updatedTo to the get bo rounds params
func (o *GetBoRoundsParams) WithUpdatedTo(updatedTo *string) *GetBoRoundsParams {
	o.SetUpdatedTo(updatedTo)
	return o
}

// SetUpdatedTo adds the updatedTo to the get bo rounds params
func (o *GetBoRoundsParams) SetUpdatedTo(updatedTo *string) {
	o.UpdatedTo = updatedTo
}

// WriteToRequest writes these params to a swagger request
func (o *GetBoRoundsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-API-Key
	if err := r.SetHeaderParam("X-API-Key", o.XAPIKey); err != nil {
		return err
	}

	if o.Cancelled != nil {

		// query param cancelled
		var qrCancelled bool

		if o.Cancelled != nil {
			qrCancelled = *o.Cancelled
		}
		qCancelled := swag.FormatBool(qrCancelled)
		if qCancelled != "" {

			if err := r.SetQueryParam("cancelled", qCancelled); err != nil {
				return err
			}
		}
	}

	if o.Completed != nil {

		// query param completed
		var qrCompleted bool

		if o.Completed != nil {
			qrCompleted = *o.Completed
		}
		qCompleted := swag.FormatBool(qrCompleted)
		if qCompleted != "" {

			if err := r.SetQueryParam("completed", qCompleted); err != nil {
				return err
			}
		}
	}

	if o.CreatedFrom != nil {

		// query param createdFrom
		var qrCreatedFrom string

		if o.CreatedFrom != nil {
			qrCreatedFrom = *o.CreatedFrom
		}
		qCreatedFrom := qrCreatedFrom
		if qCreatedFrom != "" {

			if err := r.SetQueryParam("createdFrom", qCreatedFrom); err != nil {
				return err
			}
		}
	}

	if o.CreatedTo != nil {

		// query param createdTo
		var qrCreatedTo string

		if o.CreatedTo != nil {
			qrCreatedTo = *o.CreatedTo
		}
		qCreatedTo := qrCreatedTo
		if qCreatedTo != "" {

			if err := r.SetQueryParam("createdTo", qCreatedTo); err != nil {
				return err
			}
		}
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.Debug != nil {

		// query param debug
		var qrDebug bool

		if o.Debug != nil {
			qrDebug = *o.Debug
		}
		qDebug := swag.FormatBool(qrDebug)
		if qDebug != "" {

			if err := r.SetQueryParam("debug", qDebug); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.MaxWinMultiplier != nil {

		// query param maxWinMultiplier
		var qrMaxWinMultiplier float64

		if o.MaxWinMultiplier != nil {
			qrMaxWinMultiplier = *o.MaxWinMultiplier
		}
		qMaxWinMultiplier := swag.FormatFloat64(qrMaxWinMultiplier)
		if qMaxWinMultiplier != "" {

			if err := r.SetQueryParam("maxWinMultiplier", qMaxWinMultiplier); err != nil {
				return err
			}
		}
	}

	if o.MinWinMultiplier != nil {

		// query param minWinMultiplier
		var qrMinWinMultiplier float64

		if o.MinWinMultiplier != nil {
			qrMinWinMultiplier = *o.MinWinMultiplier
		}
		qMinWinMultiplier := swag.FormatFloat64(qrMinWinMultiplier)
		if qMinWinMultiplier != "" {

			if err := r.SetQueryParam("minWinMultiplier", qMinWinMultiplier); err != nil {
				return err
			}
		}
	}

	// query param session
	qrSession := o.Session
	qSession := qrSession
	if qSession != "" {

		if err := r.SetQueryParam("session", qSession); err != nil {
			return err
		}
	}

	if o.UpdatedFrom != nil {

		// query param updatedFrom
		var qrUpdatedFrom string

		if o.UpdatedFrom != nil {
			qrUpdatedFrom = *o.UpdatedFrom
		}
		qUpdatedFrom := qrUpdatedFrom
		if qUpdatedFrom != "" {

			if err := r.SetQueryParam("updatedFrom", qUpdatedFrom); err != nil {
				return err
			}
		}
	}

	if o.UpdatedTo != nil {

		// query param updatedTo
		var qrUpdatedTo string

		if o.UpdatedTo != nil {
			qrUpdatedTo = *o.UpdatedTo
		}
		qUpdatedTo := qrUpdatedTo
		if qUpdatedTo != "" {

			if err := r.SetQueryParam("updatedTo", qUpdatedTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
