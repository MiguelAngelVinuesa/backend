// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"git-codecommit.eu-central-1.amazonaws.com/v1/repos/game-manager.git/dstore/models"
)

// GetGgPlayerRoundsReader is a Reader for the GetGgPlayerRounds structure.
type GetGgPlayerRoundsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGgPlayerRoundsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGgPlayerRoundsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGgPlayerRoundsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGgPlayerRoundsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGgPlayerRoundsOK creates a GetGgPlayerRoundsOK with default headers values
func NewGetGgPlayerRoundsOK() *GetGgPlayerRoundsOK {
	return &GetGgPlayerRoundsOK{}
}

/* GetGgPlayerRoundsOK describes a response with status code 200, with default header values.

200
*/
type GetGgPlayerRoundsOK struct {
	Payload *models.GGPlayerRoundsResponse
}

func (o *GetGgPlayerRoundsOK) Error() string {
	return fmt.Sprintf("[GET /gg/player-rounds][%d] getGgPlayerRoundsOK  %+v", 200, o.Payload)
}
func (o *GetGgPlayerRoundsOK) GetPayload() *models.GGPlayerRoundsResponse {
	return o.Payload
}

func (o *GetGgPlayerRoundsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GGPlayerRoundsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGgPlayerRoundsBadRequest creates a GetGgPlayerRoundsBadRequest with default headers values
func NewGetGgPlayerRoundsBadRequest() *GetGgPlayerRoundsBadRequest {
	return &GetGgPlayerRoundsBadRequest{}
}

/* GetGgPlayerRoundsBadRequest describes a response with status code 400, with default header values.

400
*/
type GetGgPlayerRoundsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetGgPlayerRoundsBadRequest) Error() string {
	return fmt.Sprintf("[GET /gg/player-rounds][%d] getGgPlayerRoundsBadRequest  %+v", 400, o.Payload)
}
func (o *GetGgPlayerRoundsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetGgPlayerRoundsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGgPlayerRoundsInternalServerError creates a GetGgPlayerRoundsInternalServerError with default headers values
func NewGetGgPlayerRoundsInternalServerError() *GetGgPlayerRoundsInternalServerError {
	return &GetGgPlayerRoundsInternalServerError{}
}

/* GetGgPlayerRoundsInternalServerError describes a response with status code 500, with default header values.

500
*/
type GetGgPlayerRoundsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetGgPlayerRoundsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /gg/player-rounds][%d] getGgPlayerRoundsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetGgPlayerRoundsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetGgPlayerRoundsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
