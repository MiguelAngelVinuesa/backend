// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"git-codecommit.eu-central-1.amazonaws.com/v1/repos/game-manager.git/dstore/models"
)

// GetBoRoundsReader is a Reader for the GetBoRounds structure.
type GetBoRoundsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBoRoundsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBoRoundsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBoRoundsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetBoRoundsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetBoRoundsOK creates a GetBoRoundsOK with default headers values
func NewGetBoRoundsOK() *GetBoRoundsOK {
	return &GetBoRoundsOK{}
}

/* GetBoRoundsOK describes a response with status code 200, with default header values.

200
*/
type GetBoRoundsOK struct {
	Payload *models.BOSessionRoundsResponse
}

func (o *GetBoRoundsOK) Error() string {
	return fmt.Sprintf("[GET /bo/rounds][%d] getBoRoundsOK  %+v", 200, o.Payload)
}
func (o *GetBoRoundsOK) GetPayload() *models.BOSessionRoundsResponse {
	return o.Payload
}

func (o *GetBoRoundsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BOSessionRoundsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBoRoundsBadRequest creates a GetBoRoundsBadRequest with default headers values
func NewGetBoRoundsBadRequest() *GetBoRoundsBadRequest {
	return &GetBoRoundsBadRequest{}
}

/* GetBoRoundsBadRequest describes a response with status code 400, with default header values.

400
*/
type GetBoRoundsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetBoRoundsBadRequest) Error() string {
	return fmt.Sprintf("[GET /bo/rounds][%d] getBoRoundsBadRequest  %+v", 400, o.Payload)
}
func (o *GetBoRoundsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetBoRoundsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBoRoundsInternalServerError creates a GetBoRoundsInternalServerError with default headers values
func NewGetBoRoundsInternalServerError() *GetBoRoundsInternalServerError {
	return &GetBoRoundsInternalServerError{}
}

/* GetBoRoundsInternalServerError describes a response with status code 500, with default header values.

500
*/
type GetBoRoundsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetBoRoundsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /bo/rounds][%d] getBoRoundsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetBoRoundsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetBoRoundsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
