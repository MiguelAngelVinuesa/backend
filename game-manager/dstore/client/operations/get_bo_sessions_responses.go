// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"git-codecommit.eu-central-1.amazonaws.com/v1/repos/game-manager.git/dstore/models"
)

// GetBoSessionsReader is a Reader for the GetBoSessions structure.
type GetBoSessionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBoSessionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBoSessionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBoSessionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetBoSessionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetBoSessionsOK creates a GetBoSessionsOK with default headers values
func NewGetBoSessionsOK() *GetBoSessionsOK {
	return &GetBoSessionsOK{}
}

/* GetBoSessionsOK describes a response with status code 200, with default header values.

200
*/
type GetBoSessionsOK struct {
	Payload *models.BOPlayerSessionsResponse
}

func (o *GetBoSessionsOK) Error() string {
	return fmt.Sprintf("[GET /bo/sessions][%d] getBoSessionsOK  %+v", 200, o.Payload)
}
func (o *GetBoSessionsOK) GetPayload() *models.BOPlayerSessionsResponse {
	return o.Payload
}

func (o *GetBoSessionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BOPlayerSessionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBoSessionsBadRequest creates a GetBoSessionsBadRequest with default headers values
func NewGetBoSessionsBadRequest() *GetBoSessionsBadRequest {
	return &GetBoSessionsBadRequest{}
}

/* GetBoSessionsBadRequest describes a response with status code 400, with default header values.

400
*/
type GetBoSessionsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetBoSessionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /bo/sessions][%d] getBoSessionsBadRequest  %+v", 400, o.Payload)
}
func (o *GetBoSessionsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetBoSessionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBoSessionsInternalServerError creates a GetBoSessionsInternalServerError with default headers values
func NewGetBoSessionsInternalServerError() *GetBoSessionsInternalServerError {
	return &GetBoSessionsInternalServerError{}
}

/* GetBoSessionsInternalServerError describes a response with status code 500, with default header values.

500
*/
type GetBoSessionsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetBoSessionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /bo/sessions][%d] getBoSessionsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetBoSessionsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetBoSessionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
