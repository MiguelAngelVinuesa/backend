// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"git-codecommit.eu-central-1.amazonaws.com/v1/repos/game-manager.git/dstore/models"
)

// GetBoRoundReader is a Reader for the GetBoRound structure.
type GetBoRoundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBoRoundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBoRoundOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBoRoundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetBoRoundInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetBoRoundOK creates a GetBoRoundOK with default headers values
func NewGetBoRoundOK() *GetBoRoundOK {
	return &GetBoRoundOK{}
}

/* GetBoRoundOK describes a response with status code 200, with default header values.

200
*/
type GetBoRoundOK struct {
	Payload *models.BORoundDataResponse
}

func (o *GetBoRoundOK) Error() string {
	return fmt.Sprintf("[GET /bo/round][%d] getBoRoundOK  %+v", 200, o.Payload)
}
func (o *GetBoRoundOK) GetPayload() *models.BORoundDataResponse {
	return o.Payload
}

func (o *GetBoRoundOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BORoundDataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBoRoundBadRequest creates a GetBoRoundBadRequest with default headers values
func NewGetBoRoundBadRequest() *GetBoRoundBadRequest {
	return &GetBoRoundBadRequest{}
}

/* GetBoRoundBadRequest describes a response with status code 400, with default header values.

400
*/
type GetBoRoundBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetBoRoundBadRequest) Error() string {
	return fmt.Sprintf("[GET /bo/round][%d] getBoRoundBadRequest  %+v", 400, o.Payload)
}
func (o *GetBoRoundBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetBoRoundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBoRoundInternalServerError creates a GetBoRoundInternalServerError with default headers values
func NewGetBoRoundInternalServerError() *GetBoRoundInternalServerError {
	return &GetBoRoundInternalServerError{}
}

/* GetBoRoundInternalServerError describes a response with status code 500, with default header values.

500
*/
type GetBoRoundInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetBoRoundInternalServerError) Error() string {
	return fmt.Sprintf("[GET /bo/round][%d] getBoRoundInternalServerError  %+v", 500, o.Payload)
}
func (o *GetBoRoundInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetBoRoundInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
