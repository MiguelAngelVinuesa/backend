// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetGgPlayerRoundsParams creates a new GetGgPlayerRoundsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetGgPlayerRoundsParams() *GetGgPlayerRoundsParams {
	return &GetGgPlayerRoundsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetGgPlayerRoundsParamsWithTimeout creates a new GetGgPlayerRoundsParams object
// with the ability to set a timeout on a request.
func NewGetGgPlayerRoundsParamsWithTimeout(timeout time.Duration) *GetGgPlayerRoundsParams {
	return &GetGgPlayerRoundsParams{
		timeout: timeout,
	}
}

// NewGetGgPlayerRoundsParamsWithContext creates a new GetGgPlayerRoundsParams object
// with the ability to set a context for a request.
func NewGetGgPlayerRoundsParamsWithContext(ctx context.Context) *GetGgPlayerRoundsParams {
	return &GetGgPlayerRoundsParams{
		Context: ctx,
	}
}

// NewGetGgPlayerRoundsParamsWithHTTPClient creates a new GetGgPlayerRoundsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetGgPlayerRoundsParamsWithHTTPClient(client *http.Client) *GetGgPlayerRoundsParams {
	return &GetGgPlayerRoundsParams{
		HTTPClient: client,
	}
}

/* GetGgPlayerRoundsParams contains all the parameters to send to the API endpoint
   for the get gg player rounds operation.

   Typically these are written to a http.Request.
*/
type GetGgPlayerRoundsParams struct {

	// XAPIKey.
	XAPIKey string

	// From.
	//
	// Format: int64
	From *int64

	// GameID.
	GameID string

	// PlayerID.
	PlayerID string

	// Rtp.
	//
	// Format: int32
	Rtp int32

	// Until.
	//
	// Format: int64
	Until *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get gg player rounds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGgPlayerRoundsParams) WithDefaults() *GetGgPlayerRoundsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get gg player rounds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetGgPlayerRoundsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) WithTimeout(timeout time.Duration) *GetGgPlayerRoundsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) WithContext(ctx context.Context) *GetGgPlayerRoundsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) WithHTTPClient(client *http.Client) *GetGgPlayerRoundsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAPIKey adds the xAPIKey to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) WithXAPIKey(xAPIKey string) *GetGgPlayerRoundsParams {
	o.SetXAPIKey(xAPIKey)
	return o
}

// SetXAPIKey adds the xApiKey to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) SetXAPIKey(xAPIKey string) {
	o.XAPIKey = xAPIKey
}

// WithFrom adds the from to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) WithFrom(from *int64) *GetGgPlayerRoundsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) SetFrom(from *int64) {
	o.From = from
}

// WithGameID adds the gameID to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) WithGameID(gameID string) *GetGgPlayerRoundsParams {
	o.SetGameID(gameID)
	return o
}

// SetGameID adds the gameId to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) SetGameID(gameID string) {
	o.GameID = gameID
}

// WithPlayerID adds the playerID to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) WithPlayerID(playerID string) *GetGgPlayerRoundsParams {
	o.SetPlayerID(playerID)
	return o
}

// SetPlayerID adds the playerId to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) SetPlayerID(playerID string) {
	o.PlayerID = playerID
}

// WithRtp adds the rtp to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) WithRtp(rtp int32) *GetGgPlayerRoundsParams {
	o.SetRtp(rtp)
	return o
}

// SetRtp adds the rtp to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) SetRtp(rtp int32) {
	o.Rtp = rtp
}

// WithUntil adds the until to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) WithUntil(until *int64) *GetGgPlayerRoundsParams {
	o.SetUntil(until)
	return o
}

// SetUntil adds the until to the get gg player rounds params
func (o *GetGgPlayerRoundsParams) SetUntil(until *int64) {
	o.Until = until
}

// WriteToRequest writes these params to a swagger request
func (o *GetGgPlayerRoundsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-API-Key
	if err := r.SetHeaderParam("X-API-Key", o.XAPIKey); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom int64

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	// query param gameId
	qrGameID := o.GameID
	qGameID := qrGameID
	if qGameID != "" {

		if err := r.SetQueryParam("gameId", qGameID); err != nil {
			return err
		}
	}

	// query param playerId
	qrPlayerID := o.PlayerID
	qPlayerID := qrPlayerID
	if qPlayerID != "" {

		if err := r.SetQueryParam("playerId", qPlayerID); err != nil {
			return err
		}
	}

	// query param rtp
	qrRtp := o.Rtp
	qRtp := swag.FormatInt32(qrRtp)
	if qRtp != "" {

		if err := r.SetQueryParam("rtp", qRtp); err != nil {
			return err
		}
	}

	if o.Until != nil {

		// query param until
		var qrUntil int64

		if o.Until != nil {
			qrUntil = *o.Until
		}
		qUntil := swag.FormatInt64(qrUntil)
		if qUntil != "" {

			if err := r.SetQueryParam("until", qUntil); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
