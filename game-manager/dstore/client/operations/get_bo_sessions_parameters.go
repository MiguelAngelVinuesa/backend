// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetBoSessionsParams creates a new GetBoSessionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBoSessionsParams() *GetBoSessionsParams {
	return &GetBoSessionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBoSessionsParamsWithTimeout creates a new GetBoSessionsParams object
// with the ability to set a timeout on a request.
func NewGetBoSessionsParamsWithTimeout(timeout time.Duration) *GetBoSessionsParams {
	return &GetBoSessionsParams{
		timeout: timeout,
	}
}

// NewGetBoSessionsParamsWithContext creates a new GetBoSessionsParams object
// with the ability to set a context for a request.
func NewGetBoSessionsParamsWithContext(ctx context.Context) *GetBoSessionsParams {
	return &GetBoSessionsParams{
		Context: ctx,
	}
}

// NewGetBoSessionsParamsWithHTTPClient creates a new GetBoSessionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBoSessionsParamsWithHTTPClient(client *http.Client) *GetBoSessionsParams {
	return &GetBoSessionsParams{
		HTTPClient: client,
	}
}

/* GetBoSessionsParams contains all the parameters to send to the API endpoint
   for the get bo sessions operation.

   Typically these are written to a http.Request.
*/
type GetBoSessionsParams struct {

	// XAPIKey.
	XAPIKey string

	/* CreatedFrom.

	   Return sessions that were created on or after this timestamp (format '2023-04-01 12:00:00' in UTC)
	*/
	CreatedFrom *string

	/* CreatedTo.

	   Return sessions that were created on or before this timestamp (format '2023-04-02 23:59:59' in UTC)
	*/
	CreatedTo *string

	// Cursor.
	Cursor *string

	/* Games.

	   Comma-separated list of game IDs to return results for
	*/
	Games *string

	/* Limit.

	   Overwrite default DS pagination limit if provided (must be >0)

	   Format: int32
	*/
	Limit *int32

	/* MaxHighestWin.

	   Maximum highest win value

	   Format: int32
	*/
	MaxHighestWin *int32

	/* MaxRounds.

	   Maximum number of session rounds

	   Format: int32
	*/
	MaxRounds *int32

	/* MinHighestWin.

	   Minimum highest win value

	   Format: int32
	*/
	MinHighestWin *int32

	/* MinRounds.

	   Minimum number of session rounds

	   Format: int32
	*/
	MinRounds *int32

	// Player.
	Player string

	/* UpdatedFrom.

	   Return sessions that were updated on or after this timestamp (format '2023-04-01 12:00:00' in UTC)
	*/
	UpdatedFrom *string

	/* UpdatedTo.

	   Return sessions that were updated on or before this timestamp (format '2023-04-02 23:59:59' in UTC)
	*/
	UpdatedTo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get bo sessions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBoSessionsParams) WithDefaults() *GetBoSessionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get bo sessions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBoSessionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get bo sessions params
func (o *GetBoSessionsParams) WithTimeout(timeout time.Duration) *GetBoSessionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get bo sessions params
func (o *GetBoSessionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get bo sessions params
func (o *GetBoSessionsParams) WithContext(ctx context.Context) *GetBoSessionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get bo sessions params
func (o *GetBoSessionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get bo sessions params
func (o *GetBoSessionsParams) WithHTTPClient(client *http.Client) *GetBoSessionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get bo sessions params
func (o *GetBoSessionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXAPIKey adds the xAPIKey to the get bo sessions params
func (o *GetBoSessionsParams) WithXAPIKey(xAPIKey string) *GetBoSessionsParams {
	o.SetXAPIKey(xAPIKey)
	return o
}

// SetXAPIKey adds the xApiKey to the get bo sessions params
func (o *GetBoSessionsParams) SetXAPIKey(xAPIKey string) {
	o.XAPIKey = xAPIKey
}

// WithCreatedFrom adds the createdFrom to the get bo sessions params
func (o *GetBoSessionsParams) WithCreatedFrom(createdFrom *string) *GetBoSessionsParams {
	o.SetCreatedFrom(createdFrom)
	return o
}

// SetCreatedFrom adds the createdFrom to the get bo sessions params
func (o *GetBoSessionsParams) SetCreatedFrom(createdFrom *string) {
	o.CreatedFrom = createdFrom
}

// WithCreatedTo adds the createdTo to the get bo sessions params
func (o *GetBoSessionsParams) WithCreatedTo(createdTo *string) *GetBoSessionsParams {
	o.SetCreatedTo(createdTo)
	return o
}

// SetCreatedTo adds the createdTo to the get bo sessions params
func (o *GetBoSessionsParams) SetCreatedTo(createdTo *string) {
	o.CreatedTo = createdTo
}

// WithCursor adds the cursor to the get bo sessions params
func (o *GetBoSessionsParams) WithCursor(cursor *string) *GetBoSessionsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the get bo sessions params
func (o *GetBoSessionsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithGames adds the games to the get bo sessions params
func (o *GetBoSessionsParams) WithGames(games *string) *GetBoSessionsParams {
	o.SetGames(games)
	return o
}

// SetGames adds the games to the get bo sessions params
func (o *GetBoSessionsParams) SetGames(games *string) {
	o.Games = games
}

// WithLimit adds the limit to the get bo sessions params
func (o *GetBoSessionsParams) WithLimit(limit *int32) *GetBoSessionsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get bo sessions params
func (o *GetBoSessionsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithMaxHighestWin adds the maxHighestWin to the get bo sessions params
func (o *GetBoSessionsParams) WithMaxHighestWin(maxHighestWin *int32) *GetBoSessionsParams {
	o.SetMaxHighestWin(maxHighestWin)
	return o
}

// SetMaxHighestWin adds the maxHighestWin to the get bo sessions params
func (o *GetBoSessionsParams) SetMaxHighestWin(maxHighestWin *int32) {
	o.MaxHighestWin = maxHighestWin
}

// WithMaxRounds adds the maxRounds to the get bo sessions params
func (o *GetBoSessionsParams) WithMaxRounds(maxRounds *int32) *GetBoSessionsParams {
	o.SetMaxRounds(maxRounds)
	return o
}

// SetMaxRounds adds the maxRounds to the get bo sessions params
func (o *GetBoSessionsParams) SetMaxRounds(maxRounds *int32) {
	o.MaxRounds = maxRounds
}

// WithMinHighestWin adds the minHighestWin to the get bo sessions params
func (o *GetBoSessionsParams) WithMinHighestWin(minHighestWin *int32) *GetBoSessionsParams {
	o.SetMinHighestWin(minHighestWin)
	return o
}

// SetMinHighestWin adds the minHighestWin to the get bo sessions params
func (o *GetBoSessionsParams) SetMinHighestWin(minHighestWin *int32) {
	o.MinHighestWin = minHighestWin
}

// WithMinRounds adds the minRounds to the get bo sessions params
func (o *GetBoSessionsParams) WithMinRounds(minRounds *int32) *GetBoSessionsParams {
	o.SetMinRounds(minRounds)
	return o
}

// SetMinRounds adds the minRounds to the get bo sessions params
func (o *GetBoSessionsParams) SetMinRounds(minRounds *int32) {
	o.MinRounds = minRounds
}

// WithPlayer adds the player to the get bo sessions params
func (o *GetBoSessionsParams) WithPlayer(player string) *GetBoSessionsParams {
	o.SetPlayer(player)
	return o
}

// SetPlayer adds the player to the get bo sessions params
func (o *GetBoSessionsParams) SetPlayer(player string) {
	o.Player = player
}

// WithUpdatedFrom adds the updatedFrom to the get bo sessions params
func (o *GetBoSessionsParams) WithUpdatedFrom(updatedFrom *string) *GetBoSessionsParams {
	o.SetUpdatedFrom(updatedFrom)
	return o
}

// SetUpdatedFrom adds the updatedFrom to the get bo sessions params
func (o *GetBoSessionsParams) SetUpdatedFrom(updatedFrom *string) {
	o.UpdatedFrom = updatedFrom
}

// WithUpdatedTo adds the updatedTo to the get bo sessions params
func (o *GetBoSessionsParams) WithUpdatedTo(updatedTo *string) *GetBoSessionsParams {
	o.SetUpdatedTo(updatedTo)
	return o
}

// SetUpdatedTo adds the updatedTo to the get bo sessions params
func (o *GetBoSessionsParams) SetUpdatedTo(updatedTo *string) {
	o.UpdatedTo = updatedTo
}

// WriteToRequest writes these params to a swagger request
func (o *GetBoSessionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-API-Key
	if err := r.SetHeaderParam("X-API-Key", o.XAPIKey); err != nil {
		return err
	}

	if o.CreatedFrom != nil {

		// query param createdFrom
		var qrCreatedFrom string

		if o.CreatedFrom != nil {
			qrCreatedFrom = *o.CreatedFrom
		}
		qCreatedFrom := qrCreatedFrom
		if qCreatedFrom != "" {

			if err := r.SetQueryParam("createdFrom", qCreatedFrom); err != nil {
				return err
			}
		}
	}

	if o.CreatedTo != nil {

		// query param createdTo
		var qrCreatedTo string

		if o.CreatedTo != nil {
			qrCreatedTo = *o.CreatedTo
		}
		qCreatedTo := qrCreatedTo
		if qCreatedTo != "" {

			if err := r.SetQueryParam("createdTo", qCreatedTo); err != nil {
				return err
			}
		}
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.Games != nil {

		// query param games
		var qrGames string

		if o.Games != nil {
			qrGames = *o.Games
		}
		qGames := qrGames
		if qGames != "" {

			if err := r.SetQueryParam("games", qGames); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.MaxHighestWin != nil {

		// query param maxHighestWin
		var qrMaxHighestWin int32

		if o.MaxHighestWin != nil {
			qrMaxHighestWin = *o.MaxHighestWin
		}
		qMaxHighestWin := swag.FormatInt32(qrMaxHighestWin)
		if qMaxHighestWin != "" {

			if err := r.SetQueryParam("maxHighestWin", qMaxHighestWin); err != nil {
				return err
			}
		}
	}

	if o.MaxRounds != nil {

		// query param maxRounds
		var qrMaxRounds int32

		if o.MaxRounds != nil {
			qrMaxRounds = *o.MaxRounds
		}
		qMaxRounds := swag.FormatInt32(qrMaxRounds)
		if qMaxRounds != "" {

			if err := r.SetQueryParam("maxRounds", qMaxRounds); err != nil {
				return err
			}
		}
	}

	if o.MinHighestWin != nil {

		// query param minHighestWin
		var qrMinHighestWin int32

		if o.MinHighestWin != nil {
			qrMinHighestWin = *o.MinHighestWin
		}
		qMinHighestWin := swag.FormatInt32(qrMinHighestWin)
		if qMinHighestWin != "" {

			if err := r.SetQueryParam("minHighestWin", qMinHighestWin); err != nil {
				return err
			}
		}
	}

	if o.MinRounds != nil {

		// query param minRounds
		var qrMinRounds int32

		if o.MinRounds != nil {
			qrMinRounds = *o.MinRounds
		}
		qMinRounds := swag.FormatInt32(qrMinRounds)
		if qMinRounds != "" {

			if err := r.SetQueryParam("minRounds", qMinRounds); err != nil {
				return err
			}
		}
	}

	// query param player
	qrPlayer := o.Player
	qPlayer := qrPlayer
	if qPlayer != "" {

		if err := r.SetQueryParam("player", qPlayer); err != nil {
			return err
		}
	}

	if o.UpdatedFrom != nil {

		// query param updatedFrom
		var qrUpdatedFrom string

		if o.UpdatedFrom != nil {
			qrUpdatedFrom = *o.UpdatedFrom
		}
		qUpdatedFrom := qrUpdatedFrom
		if qUpdatedFrom != "" {

			if err := r.SetQueryParam("updatedFrom", qUpdatedFrom); err != nil {
				return err
			}
		}
	}

	if o.UpdatedTo != nil {

		// query param updatedTo
		var qrUpdatedTo string

		if o.UpdatedTo != nil {
			qrUpdatedTo = *o.UpdatedTo
		}
		qUpdatedTo := qrUpdatedTo
		if qUpdatedTo != "" {

			if err := r.SetQueryParam("updatedTo", qUpdatedTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
