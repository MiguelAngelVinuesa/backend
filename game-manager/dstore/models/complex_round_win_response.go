// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComplexRoundWinResponse ComplexRoundWinResponse
//
// swagger:model ComplexRoundWinResponse
type ComplexRoundWinResponse struct {

	// player data
	// Required: true
	PlayerData *ComplexRoundWinResponsePlayerData `json:"playerData"`

	// Boolean determining whether the request was successful
	// Example: true
	// Required: true
	Success bool `json:"success"`
}

// Validate validates this complex round win response
func (m *ComplexRoundWinResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlayerData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComplexRoundWinResponse) validatePlayerData(formats strfmt.Registry) error {

	if err := validate.Required("playerData", "body", m.PlayerData); err != nil {
		return err
	}

	if m.PlayerData != nil {
		if err := m.PlayerData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("playerData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("playerData")
			}
			return err
		}
	}

	return nil
}

func (m *ComplexRoundWinResponse) validateSuccess(formats strfmt.Registry) error {

	if err := validate.Required("success", "body", bool(m.Success)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this complex round win response based on the context it is used
func (m *ComplexRoundWinResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlayerData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComplexRoundWinResponse) contextValidatePlayerData(ctx context.Context, formats strfmt.Registry) error {

	if m.PlayerData != nil {
		if err := m.PlayerData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("playerData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("playerData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComplexRoundWinResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComplexRoundWinResponse) UnmarshalBinary(b []byte) error {
	var res ComplexRoundWinResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComplexRoundWinResponsePlayerData complex round win response player data
//
// swagger:model ComplexRoundWinResponsePlayerData
type ComplexRoundWinResponsePlayerData struct {

	// Updated player balance in cents
	// Example: 999000
	// Required: true
	Balance int64 `json:"balance"`
}

// Validate validates this complex round win response player data
func (m *ComplexRoundWinResponsePlayerData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComplexRoundWinResponsePlayerData) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("playerData"+"."+"balance", "body", int64(m.Balance)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this complex round win response player data based on context it is used
func (m *ComplexRoundWinResponsePlayerData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComplexRoundWinResponsePlayerData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComplexRoundWinResponsePlayerData) UnmarshalBinary(b []byte) error {
	var res ComplexRoundWinResponsePlayerData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
