// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BOPlayerSessionsResponse BOPlayerSessionsResponse
//
// swagger:model BOPlayerSessionsResponse
type BOPlayerSessionsResponse struct {

	// Pagination cursor
	// Example: N2M5YjBkZDI3NmU0Y2UxYWE2ODMxYjVhMmVlNjkxYWN8MjAyMi0xMS0wNCAxMToyNDoxMg==
	// Required: true
	Cursor string `json:"cursor"`

	// Player sessions
	// Required: true
	Sessions []*BOPlayerSessionsResponseSessionsItems0 `json:"sessions"`
}

// Validate validates this b o player sessions response
func (m *BOPlayerSessionsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCursor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BOPlayerSessionsResponse) validateCursor(formats strfmt.Registry) error {

	if err := validate.RequiredString("cursor", "body", m.Cursor); err != nil {
		return err
	}

	return nil
}

func (m *BOPlayerSessionsResponse) validateSessions(formats strfmt.Registry) error {

	if err := validate.Required("sessions", "body", m.Sessions); err != nil {
		return err
	}

	for i := 0; i < len(m.Sessions); i++ {
		if swag.IsZero(m.Sessions[i]) { // not required
			continue
		}

		if m.Sessions[i] != nil {
			if err := m.Sessions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sessions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sessions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this b o player sessions response based on the context it is used
func (m *BOPlayerSessionsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSessions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BOPlayerSessionsResponse) contextValidateSessions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sessions); i++ {

		if m.Sessions[i] != nil {
			if err := m.Sessions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sessions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sessions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BOPlayerSessionsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BOPlayerSessionsResponse) UnmarshalBinary(b []byte) error {
	var res BOPlayerSessionsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BOPlayerSessionsResponseSessionsItems0 b o player sessions response sessions items0
//
// swagger:model BOPlayerSessionsResponseSessionsItems0
type BOPlayerSessionsResponseSessionsItems0 struct {

	// Total bet amount in cents
	// Example: 1000
	// Required: true
	Bets int64 `json:"bets"`

	// Session creation timestamp in RFC3339
	// Example: 2006-01-02T15:04:05Z
	// Required: true
	CreatedAt string `json:"createdAt"`

	// Currency
	// Example: EUR
	// Required: true
	Currency string `json:"currency"`

	// Session end balance in cents
	// Example: 100000
	// Required: true
	EndBalance int64 `json:"endBalance"`

	// Session ID
	// Example: bot96Zm0mzx8dxmUodO2JIS0hXvdhFnOiE79q
	// Required: true
	ID string `json:"id"`

	// Max win amount in cents
	// Example: 300
	// Required: true
	MaxWin int64 `json:"maxWin"`

	// Number of rounds in session
	// Example: 35
	// Required: true
	Rounds int32 `json:"rounds"`

	// Session start balance in cents
	// Example: 100000
	// Required: true
	StartBalance int64 `json:"startBalance"`

	// Session update timestamp in RFC3339
	// Example: 2006-01-02T15:04:10Z
	// Required: true
	UpdatedAt string `json:"updatedAt"`

	// Total win amount in cents
	// Example: 1000
	// Required: true
	Wins int64 `json:"wins"`
}

// Validate validates this b o player sessions response sessions items0
func (m *BOPlayerSessionsResponseSessionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxWin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRounds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BOPlayerSessionsResponseSessionsItems0) validateBets(formats strfmt.Registry) error {

	if err := validate.Required("bets", "body", int64(m.Bets)); err != nil {
		return err
	}

	return nil
}

func (m *BOPlayerSessionsResponseSessionsItems0) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.RequiredString("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *BOPlayerSessionsResponseSessionsItems0) validateCurrency(formats strfmt.Registry) error {

	if err := validate.RequiredString("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *BOPlayerSessionsResponseSessionsItems0) validateEndBalance(formats strfmt.Registry) error {

	if err := validate.Required("endBalance", "body", int64(m.EndBalance)); err != nil {
		return err
	}

	return nil
}

func (m *BOPlayerSessionsResponseSessionsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BOPlayerSessionsResponseSessionsItems0) validateMaxWin(formats strfmt.Registry) error {

	if err := validate.Required("maxWin", "body", int64(m.MaxWin)); err != nil {
		return err
	}

	return nil
}

func (m *BOPlayerSessionsResponseSessionsItems0) validateRounds(formats strfmt.Registry) error {

	if err := validate.Required("rounds", "body", int32(m.Rounds)); err != nil {
		return err
	}

	return nil
}

func (m *BOPlayerSessionsResponseSessionsItems0) validateStartBalance(formats strfmt.Registry) error {

	if err := validate.Required("startBalance", "body", int64(m.StartBalance)); err != nil {
		return err
	}

	return nil
}

func (m *BOPlayerSessionsResponseSessionsItems0) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.RequiredString("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *BOPlayerSessionsResponseSessionsItems0) validateWins(formats strfmt.Registry) error {

	if err := validate.Required("wins", "body", int64(m.Wins)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this b o player sessions response sessions items0 based on context it is used
func (m *BOPlayerSessionsResponseSessionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BOPlayerSessionsResponseSessionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BOPlayerSessionsResponseSessionsItems0) UnmarshalBinary(b []byte) error {
	var res BOPlayerSessionsResponseSessionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
