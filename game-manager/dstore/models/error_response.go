// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorResponse error response
//
// swagger:model ErrorResponse
type ErrorResponse struct {

	// An error code indicating why the request failed.
	// Example: 4001
	// Required: true
	ErrorCode int32 `json:"errorCode"`

	// Error level (R/F).
	// Example: R
	// Required: true
	ErrorLevel string `json:"errorLevel"`

	// Error message.
	// Example: Error message
	// Required: true
	Message string `json:"message"`

	// Whether or not the request was successful
	// Example: false
	// Required: true
	Success bool `json:"success"`
}

// Validate validates this error response
func (m *ErrorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorResponse) validateErrorCode(formats strfmt.Registry) error {

	if err := validate.Required("errorCode", "body", int32(m.ErrorCode)); err != nil {
		return err
	}

	return nil
}

func (m *ErrorResponse) validateErrorLevel(formats strfmt.Registry) error {

	if err := validate.RequiredString("errorLevel", "body", m.ErrorLevel); err != nil {
		return err
	}

	return nil
}

func (m *ErrorResponse) validateMessage(formats strfmt.Registry) error {

	if err := validate.RequiredString("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *ErrorResponse) validateSuccess(formats strfmt.Registry) error {

	if err := validate.Required("success", "body", bool(m.Success)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this error response based on context it is used
func (m *ErrorResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponse) UnmarshalBinary(b []byte) error {
	var res ErrorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
