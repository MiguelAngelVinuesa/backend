// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComplexRoundWinRequest ComplexRoundWinRequest
//
// swagger:model ComplexRoundWinRequest
type ComplexRoundWinRequest struct {

	// Mark round as debug
	// Example: true
	Debug *bool `json:"debug,omitempty"`

	// Player game state JSON
	// Example: {}
	PlayerGameState *string `json:"playerGameState,omitempty"`

	// Initial round result JSON
	// Example: []
	// Required: true
	Result string `json:"result"`

	// Round ID
	// Example: 7sKCVTqlnw9sRV858GFbINXotSoSCZrK
	// Required: true
	RoundID string `json:"roundId"`

	// Round state JSON
	// Example: {}
	RoundState *string `json:"roundState,omitempty"`

	// Player session ID
	// Example: bot9897cc03f5d7b43923a73bfaffc2d7dd43
	// Required: true
	SessionID string `json:"sessionId"`

	// Game session state JSON
	// Example: {}
	SessionState *string `json:"sessionState,omitempty"`

	// Win amount in cents
	// Example: 1000
	// Required: true
	Win int64 `json:"win"`
}

// Validate validates this complex round win request
func (m *ComplexRoundWinRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComplexRoundWinRequest) validateResult(formats strfmt.Registry) error {

	if err := validate.RequiredString("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

func (m *ComplexRoundWinRequest) validateRoundID(formats strfmt.Registry) error {

	if err := validate.RequiredString("roundId", "body", m.RoundID); err != nil {
		return err
	}

	return nil
}

func (m *ComplexRoundWinRequest) validateSessionID(formats strfmt.Registry) error {

	if err := validate.RequiredString("sessionId", "body", m.SessionID); err != nil {
		return err
	}

	return nil
}

func (m *ComplexRoundWinRequest) validateWin(formats strfmt.Registry) error {

	if err := validate.Required("win", "body", int64(m.Win)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this complex round win request based on context it is used
func (m *ComplexRoundWinRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComplexRoundWinRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComplexRoundWinRequest) UnmarshalBinary(b []byte) error {
	var res ComplexRoundWinRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
