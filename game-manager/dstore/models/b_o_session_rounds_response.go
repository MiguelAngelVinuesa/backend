// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BOSessionRoundsResponse BOSessionRoundsResponse
//
// swagger:model BOSessionRoundsResponse
type BOSessionRoundsResponse struct {

	// Currency
	// Example: EUR
	// Required: true
	Currency string `json:"currency"`

	// Pagination cursor
	// Example: N2M5YjBkZDI3NmU0Y2UxYWE2ODMxYjVhMmVlNjkxYWN8MjAyMi0xMS0wNCAxMToyNDoxMg==
	// Required: true
	Cursor string `json:"cursor"`

	// Session rounds
	// Required: true
	Rounds []*BOSessionRoundsResponseRoundsItems0 `json:"rounds"`
}

// Validate validates this b o session rounds response
func (m *BOSessionRoundsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCursor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRounds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BOSessionRoundsResponse) validateCurrency(formats strfmt.Registry) error {

	if err := validate.RequiredString("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *BOSessionRoundsResponse) validateCursor(formats strfmt.Registry) error {

	if err := validate.RequiredString("cursor", "body", m.Cursor); err != nil {
		return err
	}

	return nil
}

func (m *BOSessionRoundsResponse) validateRounds(formats strfmt.Registry) error {

	if err := validate.Required("rounds", "body", m.Rounds); err != nil {
		return err
	}

	for i := 0; i < len(m.Rounds); i++ {
		if swag.IsZero(m.Rounds[i]) { // not required
			continue
		}

		if m.Rounds[i] != nil {
			if err := m.Rounds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rounds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rounds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this b o session rounds response based on the context it is used
func (m *BOSessionRoundsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRounds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BOSessionRoundsResponse) contextValidateRounds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rounds); i++ {

		if m.Rounds[i] != nil {
			if err := m.Rounds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rounds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rounds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BOSessionRoundsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BOSessionRoundsResponse) UnmarshalBinary(b []byte) error {
	var res BOSessionRoundsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BOSessionRoundsResponseRoundsItems0 b o session rounds response rounds items0
//
// swagger:model BOSessionRoundsResponseRoundsItems0
type BOSessionRoundsResponseRoundsItems0 struct {

	// Bet amount in cents
	// Example: 1000
	// Required: true
	Bet int64 `json:"bet"`

	// Casino-issued bet transaction ID
	// Example: 206169bd3c6be1b06a2db376b02deb26
	// Required: true
	BetTransactionID string `json:"betTransactionID"`

	// Indicates if the round was cancelled
	// Example: true
	// Required: true
	Cancelled bool `json:"cancelled"`

	// Indicates if the round was completed
	// Example: true
	// Required: true
	Completed bool `json:"completed"`

	// Round creation timestamp in RFC3339
	// Example: 2006-01-02T15:04:05Z
	// Required: true
	CreatedAt string `json:"createdAt"`

	// Indicates if it's a debug round
	// Example: true
	// Required: true
	Debug bool `json:"debug"`

	// Round ID
	// Example: 7sKCVTqlnw9sRV858GFbINXotSoSCZrK
	// Required: true
	ID string `json:"id"`

	// New balance in cents
	// Example: 100000
	// Required: true
	NewBalance int64 `json:"newBalance"`

	// Round update timestamp in RFC3339
	// Example: 2006-01-02T15:04:10Z
	// Required: true
	UpdatedAt string `json:"updatedAt"`

	// Win amount in cents
	// Example: 1000
	Win int64 `json:"win,omitempty"`
}

// Validate validates this b o session rounds response rounds items0
func (m *BOSessionRoundsResponseRoundsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBetTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCancelled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BOSessionRoundsResponseRoundsItems0) validateBet(formats strfmt.Registry) error {

	if err := validate.Required("bet", "body", int64(m.Bet)); err != nil {
		return err
	}

	return nil
}

func (m *BOSessionRoundsResponseRoundsItems0) validateBetTransactionID(formats strfmt.Registry) error {

	if err := validate.RequiredString("betTransactionID", "body", m.BetTransactionID); err != nil {
		return err
	}

	return nil
}

func (m *BOSessionRoundsResponseRoundsItems0) validateCancelled(formats strfmt.Registry) error {

	if err := validate.Required("cancelled", "body", bool(m.Cancelled)); err != nil {
		return err
	}

	return nil
}

func (m *BOSessionRoundsResponseRoundsItems0) validateCompleted(formats strfmt.Registry) error {

	if err := validate.Required("completed", "body", bool(m.Completed)); err != nil {
		return err
	}

	return nil
}

func (m *BOSessionRoundsResponseRoundsItems0) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.RequiredString("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *BOSessionRoundsResponseRoundsItems0) validateDebug(formats strfmt.Registry) error {

	if err := validate.Required("debug", "body", bool(m.Debug)); err != nil {
		return err
	}

	return nil
}

func (m *BOSessionRoundsResponseRoundsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BOSessionRoundsResponseRoundsItems0) validateNewBalance(formats strfmt.Registry) error {

	if err := validate.Required("newBalance", "body", int64(m.NewBalance)); err != nil {
		return err
	}

	return nil
}

func (m *BOSessionRoundsResponseRoundsItems0) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.RequiredString("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this b o session rounds response rounds items0 based on context it is used
func (m *BOSessionRoundsResponseRoundsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BOSessionRoundsResponseRoundsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BOSessionRoundsResponseRoundsItems0) UnmarshalBinary(b []byte) error {
	var res BOSessionRoundsResponseRoundsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
