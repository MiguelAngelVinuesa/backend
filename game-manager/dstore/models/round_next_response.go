// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoundNextResponse RoundNextResponse
//
// swagger:model RoundNextResponse
type RoundNextResponse struct {

	// Player balance after round
	// Example: 10000
	// Required: true
	NewBalance int64 `json:"newBalance"`

	// Spin(s) result JSON
	// Example: {}
	// Required: true
	Result string `json:"result"`

	// Round ID
	// Example: 7sKCVTqlnw9sRV858GFbINXotSoSCZrK
	// Required: true
	RoundID string `json:"roundId"`

	// Boolean determining whether the request was successful
	// Example: true
	// Required: true
	Success bool `json:"success"`
}

// Validate validates this round next response
func (m *RoundNextResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoundID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoundNextResponse) validateNewBalance(formats strfmt.Registry) error {

	if err := validate.Required("newBalance", "body", int64(m.NewBalance)); err != nil {
		return err
	}

	return nil
}

func (m *RoundNextResponse) validateResult(formats strfmt.Registry) error {

	if err := validate.RequiredString("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

func (m *RoundNextResponse) validateRoundID(formats strfmt.Registry) error {

	if err := validate.RequiredString("roundId", "body", m.RoundID); err != nil {
		return err
	}

	return nil
}

func (m *RoundNextResponse) validateSuccess(formats strfmt.Registry) error {

	if err := validate.Required("success", "body", bool(m.Success)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this round next response based on context it is used
func (m *RoundNextResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RoundNextResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoundNextResponse) UnmarshalBinary(b []byte) error {
	var res RoundNextResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
