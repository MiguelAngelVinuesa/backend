// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GGRounds GGRounds
//
// swagger:model GGRounds
type GGRounds struct {

	// Bet amount in cents
	// Example: 1000
	// Required: true
	Bet int64 `json:"bet"`

	// Round creation timestamp in RFC3339
	// Example: 2006-01-02T15:04:05Z
	// Required: true
	CreatedAt string `json:"createdAt"`

	// Currency
	// Example: EUR
	// Required: true
	Currency string `json:"currency"`

	// Round ID
	// Example: 7sKCVTqlnw9sRV858GFbINXotSoSCZrK
	// Required: true
	ID string `json:"id"`

	// New balance in cents
	// Example: 100000
	// Required: true
	NewBalance int64 `json:"newBalance"`

	// Win amount in cents
	// Example: 1000
	// Required: true
	Win int64 `json:"win"`
}

// Validate validates this g g rounds
func (m *GGRounds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GGRounds) validateBet(formats strfmt.Registry) error {

	if err := validate.Required("bet", "body", int64(m.Bet)); err != nil {
		return err
	}

	return nil
}

func (m *GGRounds) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.RequiredString("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *GGRounds) validateCurrency(formats strfmt.Registry) error {

	if err := validate.RequiredString("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *GGRounds) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GGRounds) validateNewBalance(formats strfmt.Registry) error {

	if err := validate.Required("newBalance", "body", int64(m.NewBalance)); err != nil {
		return err
	}

	return nil
}

func (m *GGRounds) validateWin(formats strfmt.Registry) error {

	if err := validate.Required("win", "body", int64(m.Win)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this g g rounds based on context it is used
func (m *GGRounds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GGRounds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GGRounds) UnmarshalBinary(b []byte) error {
	var res GGRounds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
