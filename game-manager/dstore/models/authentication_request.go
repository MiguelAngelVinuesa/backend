// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthenticationRequest AuthenticationRequest
//
// swagger:model AuthenticationRequest
type AuthenticationRequest struct {

	// Casino ID
	// Example: casino-1234
	// Required: true
	CasinoID string `json:"casinoId"`

	// Game ID
	// Example: book-of-books
	// Required: true
	GameID string `json:"gameId"`

	// Player ID
	// Example: player-1234
	// Required: true
	PlayerID string `json:"playerId"`

	// Temporary authentication token
	// Example: 3f1ac31ef9022b0fc9b8ac46803ffbf5
	// Required: true
	Token string `json:"token"`
}

// Validate validates this authentication request
func (m *AuthenticationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCasinoID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGameID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticationRequest) validateCasinoID(formats strfmt.Registry) error {

	if err := validate.RequiredString("casinoId", "body", m.CasinoID); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationRequest) validateGameID(formats strfmt.Registry) error {

	if err := validate.RequiredString("gameId", "body", m.GameID); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationRequest) validatePlayerID(formats strfmt.Registry) error {

	if err := validate.RequiredString("playerId", "body", m.PlayerID); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticationRequest) validateToken(formats strfmt.Registry) error {

	if err := validate.RequiredString("token", "body", m.Token); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this authentication request based on context it is used
func (m *AuthenticationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuthenticationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthenticationRequest) UnmarshalBinary(b []byte) error {
	var res AuthenticationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
