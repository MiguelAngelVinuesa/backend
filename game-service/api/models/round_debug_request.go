// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

// RoundDebugRequest Round debug request.
//
// Start a slot-machine round using supplied initial spin data, and return the first spin. Only for DEV environment!
//
// swagger:model RoundDebugRequest
type RoundDebugRequest struct {

	// Bet amount in cents.
	// Example: 1000
	// Required: true
	Bet int64 `json:"bet"`

	// i18n
	I18n *PrefetchI18n `json:"i18n,omitempty"`

	// Symbol indexes to use for initial spin. Mutually exclusive with RNG magic and script ID
	// Example: [1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]
	Initial []int32 `json:"initial"`

	// Optional object with player choice(s).
	// Example: {"stickySymbol":5,"wing":"north"}
	PlayerChoice interface{} `json:"playerChoice,omitempty"`

	// RNG magic to use for round cache. Mutually exclusive with initial array and script ID.
	// Example: [333000,309176,333000,70126,333000,208069,330000,311766,330000,18938,333000,306296,333000,10000,6910]
	Rngmagic []int64 `json:"rngmagic"`

	// First round identification.
	// Example: 5418324dc7884ad7b7d6e0fff31e4d1a
	RoundID string `json:"roundId,omitempty"`

	// Unique identifier of scripted round scenario. Mutually exclusive with initial array and RNG magic.
	// Example: 1
	ScriptID int32 `json:"scriptId,omitempty"`

	// Player session ID.
	// Example: bot9897cc03f5d7b43923a73bfaffc2d7dd43
	// Required: true
	SessionID string `json:"sessionId"`

	// Game state information relevant for the current game
	// Example: {"flagged":[0,1,1,1,1,1,1,1,1,1,1,1,1,0]}
	State interface{} `json:"state,omitempty"`
}
