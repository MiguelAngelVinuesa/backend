// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

// HashesResponse Get hashes response.
//
// Response for retrieving the binaries hashes.
//
// swagger:model HashesResponse
type HashesResponse struct {

	// binaries
	// Required: true
	Binaries *HashesResponseBinaries `json:"binaries"`

	// Indicates if the service is running in debug mode, which would allow the round/debug call.
	// Example: false
	// Required: true
	DebugMode bool `json:"debugMode"`

	// git
	// Required: true
	Git *HashesResponseGit `json:"git"`

	// Indicates if the request succeeded.
	// Example: true
	// Required: true
	Success bool `json:"success"`
}
type HashesResponseBinaries struct {

	// SHA1 hash of the game service (main).
	// Example: fc3e8ec18f22e169e5902c37cb7f82838ac25863
	// Required: true
	Main string `json:"main"`

	// SHA1 hash of the libprng include file.
	// Example: fc3e8ec18f22e169e5902c37cb7f82838ac25863
	// Required: true
	RngInclude string `json:"rngInclude"`

	// SHA1 hash of the libprng shared lib.
	// Example: fc3e8ec18f22e169e5902c37cb7f82838ac25863
	// Required: true
	RngLib string `json:"rngLib"`
}
type HashesResponseGit struct {

	// Git hash of the game config library.
	// Required: true
	GameConfig string `json:"gameConfig"`

	// Git hash of the game engine library.
	// Required: true
	GameEngine string `json:"gameEngine"`

	// Git hash of the game manager library.
	GameManager string `json:"gameManager,omitempty"`

	// Git hash of the game service.
	// Required: true
	GameService string `json:"gameService"`
}
